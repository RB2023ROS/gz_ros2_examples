<?xml version="1.0"?>
<robot>

  <!--base_link-->
  <gazebo reference="base_link">
    <material>Gazebo/White</material>
  </gazebo>

  <!--link_1-->
  <gazebo reference="link_1">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Orange</material>
  </gazebo>

  <!--link_2-->
  <gazebo reference="link_2">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/White</material>
  </gazebo>

  <!--camera_link-->
  <gazebo reference="camera_link">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo reference="camera_rgb_frame">
    <sensor type="camera" name="rgb_cam">
      <update_rate>60</update_rate>
      <visualize>true</visualize>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>1280</width>
          <height>720</height>
          <format>R8G8B8</format>
          <!-- <format>B8G8R8</format> -->
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <ros>
          <namespace>rgb_cam</namespace>
          <remapping>image_raw:=image_raw</remapping>
          <remapping>camera_info:=camera_info</remapping>
        </ros>
        <!-- camera_name>omit so it defaults to sensor name</camera_name-->
        <!-- <frame_name>omit so it defaults to link name</frame_name> -->
        <frame_name>camera_rgb_frame</frame_name>
      </plugin>
    </sensor>
  </gazebo>

    <!-- Gazebo requires the velodyne_gazebo_plugins package -->
  <gazebo reference="velodyne">
    <sensor type="ray" name="block_laser_sensor">
      <ray>
        <scan>
          <horizontal>
            <samples>1200</samples>
            <resolution>1</resolution>
            <min_angle>-3.141592653589793</min_angle>
            <max_angle>3.141592653589793</max_angle>
          </horizontal>
          <vertical>
            <samples>64</samples>
            <resolution>1</resolution>
            <min_angle>-0.436322083</min_angle>
            <max_angle>0.2617993877991494</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.3</min>
          <max>201.0</max>
          <resolution>0.001</resolution>
        </range>
        <!-- Using gazebo's noise instead of plugin's -->
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.0</stddev>
        </noise>
      </ray>
      <!-- Using gazebo's update rate instead of plugin's -->
      <update_rate>30</update_rate>
      <plugin name="gazebo_ros_block_laser_controller" filename="libgazebo_ros_ray_sensor.so">
        <!-- Change namespace and output topic so published topic is /rrbot/laser/pointcloud -->
        <ros>
          <!-- <namespace>/rrbot/laser</namespace> -->
          <remapping>~/out:=pointcloud</remapping>
        </ros>
        <!-- Set output to sensor_msgs/PointCloud to get same output type as gazebo_ros_block_laser -->
        <output_type>sensor_msgs/PointCloud</output_type>
        <!-- <frame_name> ommited, will default to block_laser_link -->
  
        <!-- min_intensity instead of hokuyoMinIntensity -->
        <min_intensity>100.0</min_intensity>
      </plugin>
    </sensor>
  </gazebo>

</robot>